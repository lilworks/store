<?php

namespace LilWorks\StoreBundle\Entity\Repository;
use JMS\Serializer\SerializerBuilder;
use LilWorks\StoreBundle\Entity\Basket;
use LilWorks\StoreBundle\Entity\Order;
use LilWorks\StoreBundle\Entity\OrdersOrderSteps;
use LilWorks\StoreBundle\Entity\OrdersProducts;
use LilWorks\StoreBundle\Entity\OrdersRealShippingMethods;
use Proxies\__CG__\LilWorks\StoreBundle\Entity\Product;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use JMS\Serializer\SerializationContext;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNextReference($year , $prefix){
        $qb = $this->createQueryBuilder('o');
        $qb
            ->select('o.reference')
            ->where('o.reference LIKE :filter')
            ->setParameter('filter', $year.'-'.$prefix.'%');
        $results = $qb->getQuery()->getScalarResult();
        if(count($results)>0){
            $values = array();
            foreach($results as $result){
                array_push($values,intval(str_replace( $year.'-'.$prefix ,"",$result["reference"] ))) ;
            }
            rsort($values);
            return intval($values[0]+1);
        }else{
            return 1;
        }
    }

    public function getLastStep($orderId){
        $qb = $this->createQueryBuilder('o');
        $qb
            ->select('os.tag')
            ->join('o.ordersOrderSteps','oos','WITH','oos.order = o.id')
            ->join('oos.orderStep','os','WITH','os.id = oos.orderStep')
            ->where('o.id = :order_id')
            ->orderBy('oos.createdAt','DESC')
            ->setParameter('order_id',$orderId)
            ->setMaxResults(1)
            ;
        $results = $qb->getQuery()->getScalarResult();
        if(count($results)>0)
            return $results[0]["tag"];
        else
            return null;


    }



}
