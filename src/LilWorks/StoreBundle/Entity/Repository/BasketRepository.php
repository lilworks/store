<?php

namespace LilWorks\StoreBundle\Entity\Repository;
use JMS\Serializer\SerializerBuilder;
use LilWorks\StoreBundle\Entity\Basket;
use LilWorks\StoreBundle\Entity\Order;
use LilWorks\StoreBundle\Entity\OrdersOrderSteps;
use LilWorks\StoreBundle\Entity\OrdersProducts;
use LilWorks\StoreBundle\Entity\OrdersRealShippingMethods;
use Proxies\__CG__\LilWorks\StoreBundle\Entity\Product;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use JMS\Serializer\SerializationContext;

/**
 * BasketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BasketRepository extends \Doctrine\ORM\EntityRepository
{
    public function basketToOrder(Basket $basket , $tot){
        $em = $this->getEntityManager();

        $order = new Order();
        $order->setCustomer($basket->getUser()->getCustomer());

        $order->setBillingAddress($basket->getBillingAddress());
        $order->setShippingAddress($basket->getShippingAddress());

        if($basket->getShippingAddress()){
            $shippingAddress="";
            if($basket->getShippingAddress()->getName()){
                $shippingAddress.=$basket->getShippingAddress()->getName()." | ";
            }
            $shippingAddress.=$basket->getShippingAddress()->getStreet();
            if($basket->getShippingAddress()->getComplement()){
                $shippingAddress.=$basket->getShippingAddress()->getComplement()." , ";
            }

            $shippingAddress.=  $basket->getShippingAddress()->getZipCode() . " " . $basket->getShippingAddress()->getCity() . " | "  .$basket->getShippingAddress()->getCountry()->getName();
            $order->setShippingAddressString($shippingAddress);
        }
        if($basket->getBillingAddress()){
            $billingAddress="";
            if($basket->getBillingAddress()->getName()){
                $billingAddress.=$basket->getBillingAddress()->getName()." | ";
            }
            $billingAddress.=$basket->getBillingAddress()->getStreet();
            if($basket->getBillingAddress()->getComplement()){
                $billingAddress.=$basket->getBillingAddress()->getComplement()." , ";
            }

            $billingAddress.=  $basket->getBillingAddress()->getZipCode() . " " . $basket->getBillingAddress()->getCity() . " | "  .$basket->getShippingAddress()->getCountry()->getName();
            $order->setBillingAddressString($billingAddress);
        }




        $orderStep = $em->getRepository('LilWorksStoreBundle:OrderStep')->findOneByTag('NEW');
        $orderOrderStep = new OrdersOrderSteps();
        $orderOrderStep->setOrderStep($orderStep);
        $orderOrderStep->setOrder($order);
        $em->persist($orderOrderStep);
        $order->addOrdersOrderStep($orderOrderStep);

        $orderType = $em->getRepository('LilWorksStoreBundle:OrderType')->findOneByTag('FACTURE');
        $order->setOrderType($orderType);
        /*
         * Products
         */
        $memP = array();
        foreach($basket->getBasketsProducts() as $basketProduct){
            $orderProduct = new OrdersProducts();
            $orderProduct->setProduct($basketProduct->getProduct());
            $orderProduct->setQuantity($basketProduct->getQuantity());
            $orderProduct->setOrder($order);

            $order->addOrdersProduct($orderProduct);
            $em->persist($orderProduct);
            $em->flush();

            $memP[$basketProduct->getId()] = $orderProduct->getId();
        }

        $order->setTot($tot);
        $order->setPayed(0);
        $em->persist($order);

        /*
         * ShippingMethod
         */
        $memSm = array();
        $memSmP = array();
        foreach($basket->getBasketsRealShippingMethods() as $basketRealShippingMethod){
            $orderRealShippingMethod = new OrdersRealShippingMethods();
            $orderRealShippingMethod->setPrice($basketRealShippingMethod->getPrice());
            $orderRealShippingMethod->setShippingMethod($basketRealShippingMethod->getShippingMethod());
            $orderRealShippingMethod->setOrder($order);


            $em->persist($orderRealShippingMethod);
            $em->flush();
            $order->addOrdersRealShippingMethod($orderRealShippingMethod);

            $memSm[$basketRealShippingMethod->getId()] = $orderRealShippingMethod->getId();


        }
        $em->persist($order);
        $em->flush();

        //var_dump(count($basket->getBasketsRealShippingMethods()));
        foreach($basket->getBasketsRealShippingMethods() as $basketRealShippingMethod){
            //var_dump(count($basketRealShippingMethod->getBasketsProducts()));
            foreach($basketRealShippingMethod->getBasketsProducts() as $product){
                $orderProduct = $em->getRepository('LilWorksStoreBundle:OrdersProducts')->find($memP[$product->getId()]);
                $orderRealShippingMethod = $em->getRepository('LilWorksStoreBundle:OrdersRealShippingMethods')->find($memSm[$basketRealShippingMethod->getId()]);
                $orderProduct->setOrderRealShippingMethod($orderRealShippingMethod);
                $em->persist($orderProduct);
            }
        }


        $em->remove($basket);
        $em->flush();

        return $order;
    }
}
