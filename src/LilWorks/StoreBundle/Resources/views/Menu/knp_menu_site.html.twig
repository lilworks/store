{% extends 'knp_menu.html.twig' %}
{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not same as(false) -%}
            {{- ' %s="%s"'|format(name, value is same as(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

{% block compressed_root %}
    {% spaceless %}
        {{ block('root') }}
    {% endspaceless %}
{% endblock %}

{% block root %}
    {% set listAttributes = item.childrenAttributes %}
    {{ block('list') -}}
{% endblock %}

{% block list %}

    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {% import _self as knp_menu %}
        <ul {{ knp_menu.attributes(listAttributes) }}>
            {{ block('children') }}
        </ul>
    {% endif %}
{% endblock %}

{% block listDiv %}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {% import _self as knp_menu %}
        <div {{ knp_menu.attributes(listAttributes) }}>
            {{ block('children') }}
        </div>
    {% endif %}
{% endblock %}

{% block children %}
    {# save current variables #}
    {% set currentOptions = options %}
    {% set currentItem = item %}

    {# update the depth for children #}
    {% if options.depth is not none %}
        {% set options = options|merge({'depth': currentOptions.depth - 1}) %}
    {% endif %}
    {# update the matchingDepth for children #}
    {% if options.matchingDepth is not none and options.matchingDepth > 0 %}
        {% set options = options|merge({'matchingDepth': currentOptions.matchingDepth - 1}) %}
    {% endif %}
    {% for item in currentItem.children %}
        {%  if item.parent.name == "root"  %}
            {{ block('item') }}
        {% else %}
            {{ block('linkElement') }}
        {% endif %}
    {% endfor %}
    {# restore current variables #}
    {% set item = currentItem %}
    {% set options = currentOptions %}
{% endblock %}
{% block item %}
    {% import "knp_menu.html.twig" as macros %}



    {% if item.displayed %}
        {%- set attributes = item.attributes %}
        {%- set is_dropdown = attributes.dropdown|default(false) %}
        {%- set divider_prepend = attributes.divider_prepend|default(false) %}
        {%- set divider_append = attributes.divider_append|default(false) %}

        {# unset bootstrap specific attributes #}
        {%- set attributes = attributes|merge({'dropdown': null, 'divider_prepend': null, 'divider_append': null }) %}

        {%- if divider_prepend %}
            {{ block('dividerElement') }}
        {%- endif %}

        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# building the class of the children #}
        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}

        {# adding classes for dropdown #}
        {%- if is_dropdown %}
            {%- set classes = classes|merge(['dropdown']) %}
            {%- set classes = classes|merge(['my-dropdown']) %}
            {%- set childrenClasses = childrenClasses|merge(['dropdown-menu','my-dropdown-menu']) %}
        {%- endif %}

        {# putting classes together #}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}

        {# displaying the item #}
        <li{{ macros.attributes(attributes) }}>
            {%- if is_dropdown %}
                {{ block('dropdownElement') }}
            {%- elseif item.uri is not empty and (not item.current or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
            {# render the list of children#}
            {%  if item.parent is not null  %}
                {{ block('listDiv') }}
            {% else %}
                {{ block('list') }}
            {% endif %}
        </li>

        {%- if divider_append %}
            {{ block('dividerElement') }}
        {%- endif %}
    {% endif %}
{% endblock %}

{% block dividerElement %}
    {% if item.level == 1 %}
        <li class="divider-vertical"></li>
    {% else %}
        <li class="divider"></li>
    {% endif %}
{% endblock %}



{% block linkElement %}
    {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}

    {#
    {%- set classes = classes|merge(['dropdown-item']) %}
    #}
    {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
    {% if item.attribute('icon') is not empty  %}
        {% if item.attribute('isfirstcat') is not empty  %}
            <div class="menu-item-category-first">
                <a href="{{ item.uri }}"{{ macros.attributes(attributes) }}>
                    <img class="dropdown-icon" src="{{ asset(item.attribute('icon')) | imagine_filter('site_menu_thumb_first') }}" />
                    {{ block('label') }}
                </a>
            </div>
        {% else %}
            <div class="menu-item-category">
                <a href="{{ item.uri }}"{{ macros.attributes(attributes) }}>
                    <img class="dropdown-icon" src="{{ asset(item.attribute('icon')) | imagine_filter('site_menu_thumb') }}" />
                    {{ block('label') }}
                </a>
            </div>
        {% endif %}

    {% else %}
        <a href="{{ item.uri }}"{{ macros.attributes(attributes) }}>
            {{ block('label') }}
        </a>
    {% endif %}
{% endblock %}

{% block spanElement %}
    <span>{{ macros.attributes(item.labelAttributes) }}>
        {% if item.attribute('icon') is not empty  %}
            <img src="{{ asset(item.attribute('icon')) | imagine_filter('my_thumb') }}" />
        {% endif %}
        {{ block('label') }}
	</span>
{% endblock %}

{% block dropdownElement %}
    {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
    {%- set classes = classes|merge(['dropdown-toggle','nav-link']) %}
    {%- set attributes = item.linkAttributes %}
    {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
    {%- set attributes = attributes|merge({'data-toggle': 'dropdown'}) %}
    {% if item.attribute('icon') is not empty  %}
        <a href="{{ item.uri }}"{{ macros.attributes(attributes) }}>
            <img class="dropdown-icon" src="{{ asset(item.attribute('icon')) | imagine_filter('site_menu_thumb') }}" />
            {{ block('label') }}
        </a>
    {% else %}
        <a href="{{ item.uri }}"{{ macros.attributes(attributes) }}>
            {{ block('label') }}
        </a>
    {% endif %}
{% endblock %}

{% block label %}
    {{ item.label }}
{% endblock %}